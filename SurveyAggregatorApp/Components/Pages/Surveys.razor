@* Components/Pages/Surveys.razor - Updated for database authentication *@
@page "/surveys"
@using SurveyAggregatorApp.Services
@using SurveyAggregatorApp.Models
@inject SurveyProviderService ProviderService
@inject UserService UserService
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer


<PageTitle>Available Surveys - Survey Hub</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="mb-1">Available Surveys</h2>
            <p class="text-muted">Complete surveys to earn money from connected platforms</p>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-outline-primary" @onclick="RefreshSurveys" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                <i class="fas fa-sync-alt me-1"></i>Refresh
            </button>
            <a href="/providers" class="btn btn-primary">
                <i class="fas fa-plus me-1"></i>Connect Accounts
            </a>
        </div>
    </div>

    @if (currentUser == null)
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            Please <a href="/login">sign in</a> to view available surveys.
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading surveys from connected platforms...</p>
        </div>
    }
    else if (!currentUser.ConnectedAccounts.Any(a => a.IsConnected))
    {
        <div class="alert alert-info">
            <div class="d-flex align-items-center">
                <i class="fas fa-info-circle fa-2x me-3"></i>
                <div>
                    <h4 class="alert-heading">No Connected Accounts</h4>
                    <p class="mb-2">You haven't connected any survey provider accounts yet.</p>
                    <p class="mb-0">Connect your accounts to start seeing available surveys here.</p>
                </div>
            </div>
            <hr>
            <a href="/providers" class="btn btn-primary">
                <i class="fas fa-link me-1"></i>Connect Survey Accounts
            </a>
        </div>
    }
    else if (!surveys.Any())
    {
        <div class="alert alert-secondary">
            <div class="text-center py-4">
                <i class="fas fa-clipboard fa-3x text-muted mb-3"></i>
                <h4>No Surveys Available</h4>
                <p class="text-muted mb-3">There are no new surveys available right now. This could be because:</p>
                <ul class="list-unstyled text-muted">
                    <li>• All available surveys have been completed</li>
                    <li>• No new surveys match your profile</li>
                    <li>• Survey providers are updating their inventory</li>
                </ul>
                <button class="btn btn-outline-primary mt-2" @onclick="RefreshSurveys">
                    <i class="fas fa-sync-alt me-1"></i>Check Again
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Survey Filters -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" placeholder="Search surveys..." @bind="searchTerm" @oninput="FilterSurveys">
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="selectedProvider">
                    <option value="">All Providers</option>
                    @foreach (var provider in surveys.GroupBy(s => s.ProviderName).Select(g => g.Key))
                    {
                        <option value="@provider">@provider</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <select class="form-select" @bind="sortBy">
                    <option value="reward">Highest Reward</option>
                    <option value="time">Shortest Time</option>
                    <option value="provider">Provider</option>
                </select>
            </div>
        </div>

        <!-- Survey Cards -->
        <div class="row">
            @foreach (var survey in filteredSurveys)
            {
                <div class="col-md-6 col-xl-4 mb-4">
                    <div class="card h-100 survey-card" style="transition: transform 0.2s;">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start mb-3">
                                <span class="badge bg-secondary">@survey.ProviderName</span>
                                <span class="badge bg-success fs-6">£@survey.Reward.ToString("F2")</span>
                            </div>
                            
                            <h5 class="card-title">@survey.Title</h5>
                            <p class="card-text text-muted small">@survey.Description</p>
                            
                            <div class="survey-meta d-flex justify-content-between text-muted small mb-3">
                                <span>
                                    <i class="fas fa-clock me-1"></i>~@survey.EstimatedMinutes min
                                </span>
                                @if (!string.IsNullOrEmpty(survey.Category))
                                {
                                    <span>
                                        <i class="fas fa-tag me-1"></i>@survey.Category
                                    </span>
                                }
                            </div>
                        </div>
                        
                        <div class="card-footer bg-transparent">
                            <button class="btn btn-primary w-100" @onclick="() => StartSurvey(survey)" disabled="@startingSurvey">
                                @if (startingSurvey)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="fas fa-play me-1"></i>Start Survey
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Survey Statistics -->
        <div class="mt-4">
            <div class="row text-center">
                <div class="col-md-3">
                    <div class="stat-card">
                        <h4 class="text-primary">@surveys.Count</h4>
                        <small class="text-muted">Available Surveys</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <h4 class="text-success">£@surveys.Sum(s => s.Reward).ToString("F2")</h4>
                        <small class="text-muted">Total Potential</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <h4 class="text-info">@surveys.GroupBy(s => s.ProviderId).Count()</h4>
                        <small class="text-muted">Connected Platforms</small>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <h4 class="text-warning">@((int)surveys.Average(s => s.EstimatedMinutes))</h4>
                        <small class="text-muted">Avg. Minutes</small>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .survey-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .stat-card {
        padding: 1rem;
    }
</style>

@code {
    private User? currentUser;
    private List<ExternalSurvey> surveys = new();
    private List<ExternalSurvey> filteredSurveys = new();
    private bool isLoading = true;
    private bool startingSurvey = false;
    private string searchTerm = string.Empty;
    private string selectedProvider = string.Empty;
    private string sortBy = "reward";

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
        if (currentUser == null)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadSurveys();
    }

    private async Task LoadSurveys()
    {
        isLoading = true;
        try
        {
            surveys = await ProviderService.GetAvailableSurveysAsync(currentUser!);
            FilterSurveys();
        }
        catch (Exception ex)
        {
            surveys = new List<ExternalSurvey>();
            // Log error
            Console.WriteLine($"Error loading surveys: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshSurveys()
    {
        await LoadSurveys();
    }

    private void FilterSurveys()
    {
        //filteredSurveys = surveys.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredSurveys = filteredSurveys.Where(s => 
                s.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                s.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }

        // Apply provider filter
        if (!string.IsNullOrWhiteSpace(selectedProvider))
        {
            filteredSurveys = filteredSurveys.Where(s => s.ProviderName == selectedProvider).ToList();
        }

        SortSurveys();
    }

    private void SortSurveys()
    {
        filteredSurveys = sortBy switch
        {
            "reward" => filteredSurveys.OrderByDescending(s => s.Reward).ToList(),
            "time" => filteredSurveys.OrderBy(s => s.EstimatedMinutes).ToList(),
            "provider" => filteredSurveys.OrderBy(s => s.ProviderName).ThenByDescending(s => s.Reward).ToList(),
            _ => filteredSurveys.OrderByDescending(s => s.Reward).ToList()
        };
    }

    private async Task StartSurvey(ExternalSurvey survey)
    {
        startingSurvey = true;
        try
        {
            if (survey.ProviderId == "pollfish")
            {
                var pollfishService = new PollfishApiService(new HttpClient());
                var userAccount = currentUser!.ConnectedAccounts
                    .FirstOrDefault(a => a.ProviderId == "pollfish" && a.IsConnected);

                if (userAccount != null)
                {
                    var surveyLink = await pollfishService.GetSurveyLinkAsync(
                        survey.Id.Replace("pollfish_", ""),
                        currentUser!,
                        userAccount.UserToken);

                    if (!string.IsNullOrEmpty(surveyLink))
                    {
                        await JSRuntime.InvokeVoidAsync("open", surveyLink, "_blank");
                        Console.WriteLine($"User started survey: {survey.Id}");
                    }
                    else
                    {
                        Console.WriteLine("Could not get survey link from Pollfish");
                    }
                }
            }
            else
            {
                // For other providers, open direct link and simulate completion
                await JSRuntime.InvokeVoidAsync("open", survey.SurveyUrl, "_blank");
                await SimulateSurveyCompletion(survey);
            }
        }
        finally
        {
            startingSurvey = false;
        }
    }

    private async Task SimulateSurveyCompletion(ExternalSurvey survey)
    {
        if (survey.ProviderId != "pollfish")
        {
            await Task.Delay(2000); // Simulate survey time

            var success = await UserService.RecordSurveyCompletionAsync(currentUser!.Id, survey);
            if (success)
            {
                // Refresh current user data
                currentUser = await AuthService.GetCurrentUserAsync();
                await LoadSurveys(); // Refresh survey list
                StateHasChanged();
            }
        }
    }
}
