@using SurveyAggregatorApp.Services
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
        <a class="navbar-brand" href="/">Survey Hub</a>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">🏠 Home</a>
                </li>

                @if (currentUser != null)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/surveys">📋 Available Surveys</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/providers">🔗 Connect Accounts</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/earnings">💰 Earnings</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <a class="nav-link" href="/login">🔐 Login</a>
                    </li>
                }
            </ul>

            @if (currentUser != null)
            {
                <span class="navbar-text me-3">
                    Welcome, @currentUser.Name | Balance: £@currentUser.TotalEarnings.ToString("F2")
                </span>
                <button class="btn btn-outline-light btn-sm" @onclick="Logout">Logout</button>
            }
            else
            {
                <a class="btn btn-light btn-sm" href="/login">Login</a>
            }
        </div>
    </div>
</nav>

@code {
    private Models.User? currentUser;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetCurrentUserAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/");
    }
}